diff --git a/palette.cpp b/palette.cpp
index 9012989..bc038c4 100644
--- a/palette.cpp
+++ b/palette.cpp
@@ -4,13 +4,544 @@
 #include <QFile>
 #include <QDebug>
 
+int monster = 1;
+
+QRgb monster_fixed_colors[256] = {
+0xffff00ff,
+0xff070000,
+0xff060208,
+0xff000418,
+0xff060905,
+0xff0c0800,
+0xff280006,
+0xff15060f,
+0xff150708,
+0xff0f0907,
+0xff2a0200,
+0xff1c0900,
+0xff340201,
+0xff220808,
+0xff3b0101,
+0xff220900,
+0xff001309,
+0xff120f00,
+0xff0c0e27,
+0xff290804,
+0xff200a12,
+0xff470005,
+0xff101106,
+0xff0e110e,
+0xff120f18,
+0xff4d0000,
+0xff190f10,
+0xff171109,
+0xff111130,
+0xff20110d,
+0xff410801,
+0xff0f1906,
+0xff380c19,
+0xff171810,
+0xff161816,
+0xff1a1909,
+0xff201800,
+0xff181820,
+0xff032106,
+0xff311211,
+0xff6f0004,
+0xff3c0f10,
+0xff1f190d,
+0xff1e1821,
+0xff191834,
+0xff211819,
+0xff211826,
+0xff2e151c,
+0xff281810,
+0xff351505,
+0xff2f1618,
+0xff2c1625,
+0xff281917,
+0xff2f1910,
+0xff202000,
+0xff1f2109,
+0xff1d201f,
+0xff202019,
+0xff690b0a,
+0xff1f2028,
+0xff282012,
+0xff491718,
+0xff212137,
+0xff292219,
+0xff322011,
+0xff302019,
+0xff30201e,
+0xff39200d,
+0xff27223a,
+0xff372017,
+0xff461a27,
+0xff2e240b,
+0xff2c2324,
+0xff2a232d,
+0xff451d1a,
+0xff3a2022,
+0xff501c08,
+0xff5e1714,
+0xff342138,
+0xffaf0000,
+0xff282446,
+0xff1d2938,
+0xff402026,
+0xff272826,
+0xff441f29,
+0xff202b29,
+0xff631721,
+0xff1a2e1e,
+0xff123119,
+0xff292b0c,
+0xff282931,
+0xff521d25,
+0xff5c1e00,
+0xff651b03,
+0xff29293e,
+0xff003b00,
+0xff352917,
+0xff0e3611,
+0xff392821,
+0xff382826,
+0xff47260c,
+0xff40281d,
+0xff2c2964,
+0xff3f2929,
+0xff392b32,
+0xff562422,
+0xff8c151a,
+0xff303038,
+0xff343412,
+0xff50292e,
+0xff562736,
+0xff4b2b33,
+0xff393223,
+0xff412f2b,
+0xff792013,
+0xff3f311f,
+0xff4d2d1c,
+0xff323248,
+0xff443020,
+0xff2b3545,
+0xff353152,
+0xff3b313c,
+0xff492f21,
+0xff353431,
+0xff462f2f,
+0xff502d2c,
+0xff3b3429,
+0xff2c3835,
+0xff4a3027,
+0xff2d364d,
+0xff3e380c,
+0xffaa151f,
+0xff43361c,
+0xff353840,
+0xff742931,
+0xff8e2509,
+0xff622f3e,
+0xff493a27,
+0xff593342,
+0xff6e3207,
+0xff822c09,
+0xff53392c,
+0xff3c388d,
+0xff493b3b,
+0xff3d3c61,
+0xff49395c,
+0xff5f353d,
+0xff74321b,
+0xff3b413b,
+0xff5e382e,
+0xff653818,
+0xff603737,
+0xff543a44,
+0xff4d3e34,
+0xff5a3a34,
+0xff354353,
+0xff533c3b,
+0xff4e4027,
+0xff683735,
+0xff553f23,
+0xff474420,
+0xff48404c,
+0xff41434d,
+0xff3a445d,
+0xff5f3d2b,
+0xff254f2f,
+0xff73393f,
+0xff4d491b,
+0xff424b36,
+0xff783b31,
+0xff4e4b14,
+0xff793a4c,
+0xff694438,
+0xff624546,
+0xff5e4a33,
+0xff5d4949,
+0xff5f4a38,
+0xff704350,
+0xff6c4642,
+0xff4d4c72,
+0xff5c4c42,
+0xff774441,
+0xff0a6930,
+0xff4d525a,
+0xff066d25,
+0xff6a4e31,
+0xff485468,
+0xff485375,
+0xffb53b11,
+0xffce3509,
+0xff615457,
+0xff8c4d14,
+0xff715253,
+0xffa64735,
+0xff8b4d53,
+0xff854f5e,
+0xff515d7d,
+0xffa14c21,
+0xff665f22,
+0xff8e5333,
+0xff715b43,
+0xff7e5651,
+0xff6c5c50,
+0xff6b5f3d,
+0xff964f61,
+0xff5e6067,
+0xff94544a,
+0xff7b5e3d,
+0xffa1515b,
+0xfff13f12,
+0xff895b4a,
+0xff855a75,
+0xff5c677a,
+0xff646853,
+0xff965b6b,
+0xff586c90,
+0xffdf4f29,
+0xff6c7b11,
+0xffc45c73,
+0xffc96138,
+0xffef5b15,
+0xffb26677,
+0xffc0665b,
+0xff13a239,
+0xff6e82ae,
+0xff827f91,
+0xffa07b57,
+0xffc87140,
+0xffa37877,
+0xffb1738b,
+0xff858465,
+0xffad7c4f,
+0xff39a162,
+0xffce7f18,
+0xffef7828,
+0xfff17b43,
+0xffd18097,
+0xfffa8515,
+0xffaf9b63,
+0xffd58ca6,
+0xff89a2d3,
+0xffb2b02c,
+0xfff89d32,
+0xffe7a86f,
+0xfff9a556,
+0xfff9af39,
+0xffd2b492,
+0xffa6c3ef,
+0xfff7c834,
+0xfff6e533,
+0xffd9def3,
+0xfff7e279,
+0xfff9f15e,
+0xfff3f0a5,
+0xfff9f8e4,
+0x00000000
+};
+
+QRgb nonenemy_fixed_colors[256] = {
+0xffff00ff,
+0xff101010,
+0xff2b1013,
+0xff390008,
+0xff630313,
+0xff7a0119,
+0xff2b0109,
+0xffab0526,
+0xffee1b46,
+0xff90122a,
+0xff330210,
+0xff690130,
+0xff502048,
+0xff30262f,
+0xff080008,
+0xff181018,
+0xff524f52,
+0xff353435,
+0xff2b0146,
+0xff210135,
+0xff160325,
+0xff0f031b,
+0xff2f0c68,
+0xff4c20a2,
+0xff100138,
+0xff633ace,
+0xff30118b,
+0xff2f2358,
+0xff17016a,
+0xff64626c,
+0xff160853,
+0xff393263,
+0xff726dcf,
+0xff7f7adc,
+0xff474571,
+0xff000008,
+0xff04040d,
+0xff080811,
+0xff262642,
+0xff1f1f32,
+0xff101018,
+0xff282838,
+0xff28282e,
+0xff58585b,
+0xff11132f,
+0xff171821,
+0xff202128,
+0xff72747f,
+0xff444756,
+0xff555865,
+0xff424347,
+0xff030f3a,
+0xff343846,
+0xff838796,
+0xff00071e,
+0xff23356f,
+0xff404862,
+0xff2e3341,
+0xff3d4354,
+0xff9ba5bd,
+0xff353e52,
+0xff545e75,
+0xff5a6a87,
+0xff4c525d,
+0xff263041,
+0xff455673,
+0xff0b2750,
+0xff647c9e,
+0xff445165,
+0xff7792b8,
+0xff043c7b,
+0xff18579d,
+0xff8bb6e5,
+0xff202831,
+0xff2477cf,
+0xff182028,
+0xff021323,
+0xff283037,
+0xffb4ddfa,
+0xff042439,
+0xff34b8ec,
+0xff5be3fe,
+0xff051012,
+0xff101818,
+0xff000908,
+0xff022116,
+0xff0a482d,
+0xff146f3d,
+0xff013316,
+0xff1c8548,
+0xff507058,
+0xff1eed43,
+0xff006808,
+0xff18521c,
+0xff16781a,
+0xff01a800,
+0xff006000,
+0xff003800,
+0xff002800,
+0xff002000,
+0xff014201,
+0xff06ce05,
+0xff031803,
+0xff169716,
+0xff2db72d,
+0xff63d663,
+0xff93e893,
+0xffc0f7c0,
+0xff283028,
+0xff018000,
+0xff059301,
+0xff038202,
+0xff037202,
+0xff054e01,
+0xff055302,
+0xff12ae06,
+0xff086000,
+0xff010b00,
+0xff108000,
+0xff25c10b,
+0xff082800,
+0xff082000,
+0xff185800,
+0xff103800,
+0xff298f01,
+0xff226c02,
+0xff70f830,
+0xff0f1e08,
+0xff5bf201,
+0xff58e801,
+0xff5ef504,
+0xff67fe0d,
+0xff8bf42f,
+0xffb8f878,
+0xffe1f0d1,
+0xffebfadb,
+0xff20211f,
+0xff1f201e,
+0xff203800,
+0xff68ac0b,
+0xff284008,
+0xfff7f8f0,
+0xff080800,
+0xff1d1d14,
+0xfff8ef63,
+0xff2c2b1d,
+0xff211f0c,
+0xff272512,
+0xff17160d,
+0xff554b06,
+0xff72650f,
+0xff525043,
+0xff876f09,
+0xfff4ce38,
+0xfff8e7a4,
+0xff353228,
+0xff342a0f,
+0xffb09038,
+0xff413821,
+0xfff2a902,
+0xff91722d,
+0xffcdbea4,
+0xffa06810,
+0xfff7a42b,
+0xffb3966f,
+0xff7a5e3d,
+0xff5b3101,
+0xff120b03,
+0xff6c4e2c,
+0xff292016,
+0xfff99633,
+0xff4d3114,
+0xffea9842,
+0xff634221,
+0xfffbac59,
+0xff9a7653,
+0xff675747,
+0xff6a3402,
+0xfff78826,
+0xff773803,
+0xff462508,
+0xfff68220,
+0xff683810,
+0xff57371b,
+0xff503a28,
+0xff231103,
+0xff975018,
+0xffb06020,
+0xff532707,
+0xffd27029,
+0xffe37f3c,
+0xff4b3f37,
+0xff53473f,
+0xff2f1100,
+0xff7e3d19,
+0xff512710,
+0xfff56419,
+0xff341708,
+0xfffb6724,
+0xffc75722,
+0xffd54a11,
+0xff361d13,
+0xffef4604,
+0xff902d09,
+0xff662007,
+0xffb13e11,
+0xff461807,
+0xff472518,
+0xff622814,
+0xffa84529,
+0xff38241e,
+0xff3b2721,
+0xff7b1f09,
+0xff551506,
+0xff802712,
+0xff601000,
+0xff300800,
+0xff86473a,
+0xff211816,
+0xff380800,
+0xff7b1806,
+0xffb32911,
+0xffe54526,
+0xfff52607,
+0xfff25e4d,
+0xff270603,
+0xff3e0e0a,
+0xff1e0301,
+0xff65120d,
+0xff68322e,
+0xffb30803,
+0xff760502,
+0xff4a0402,
+0xff910b06,
+0xff571917,
+0xff390100,
+0xff300000,
+0xff180000,
+0xff100000,
+0xff080000,
+0xff5b0402,
+0xff650403,
+0xff741311,
+0xff300808,
+0xff972a28,
+0xff441414,
+0xff100808,
+0xff180d0d,
+0xff1b1212,
+0xff2b2020,
+0xff181818,
+0xff151515,
+0xff0d0d0d,
+0xff0b0b0b,
+0xff080808,
+0xff000000	
+};
+
+
 Palette::Palette(const ImageContainer& images) {
-	for (int i=0; i<images.imageCount(); i++) {
-		const QImage& img = images.getByIndex(i);
-		for (int y=0; y<img.height(); y++)
-			for (int x=0; x<img.width(); x++)
-				insert(img.pixel(x, y));
-	}
+//	for (int i=0; i<images.imageCount(); i++) {
+//		const QImage& img = images.getByIndex(i);
+//		for (int y=0; y<img.height(); y++)
+//			for (int x=0; x<img.width(); x++)
+//				insert(img.pixel(x, y));
+//	}
+if(monster) {
+for(int i=0;i<256;i++) {
+colors.insert(monster_fixed_colors[i], i);
+}
+
+} else {
+for(int i=0;i<256;i++) {
+colors.insert(nonenemy_fixed_colors[i], i);
+}
+}
 }
 
 void Palette::insert(const QRgb color) {
diff --git a/textool.cpp b/textool.cpp
index b009dcb..7a11296 100644
--- a/textool.cpp
+++ b/textool.cpp
@@ -26,6 +26,8 @@
 
 static bool g_verbose = false;
 
+extern int monster;
+
 // Allow for colored output on unix systems
 #ifndef Q_OS_WIN32
 #define REDCOLOR		"\033[31m"
@@ -89,6 +91,7 @@ int main(int argc, char** argv) {
 	parser.addOption(QCommandLineOption(QStringList() << "n" << "nearest", "Use nearest-neighbor filtering for scaling mipmaps."));
 	parser.addOption(QCommandLineOption(QStringList() << "b" << "bilinear", "Use bilinear filtering for scaling mipmaps."));
 	parser.addOption(QCommandLineOption("vqcodeusage", "Output an image that visualizes compression code usage.", "filename"));
+        parser.addOption(QCommandLineOption("nonenemy", "Use nonenemy common palette instead of monster"));
 	parser.setSingleDashWordOptionMode(QCommandLineParser::ParseAsLongOptions);
 	parser.process(app);
 
@@ -123,6 +126,10 @@ int main(int argc, char** argv) {
 		return -1;
 	}
 
+if(parser.isSet("nonenemy")) {
+monster = 0;
+}
+
 	// Now we can start building the type specifier
 	int textureType = (pixelFormat << PIXELFORMAT_SHIFT);
 	textureType |= parser.isSet("mipmap") ? FLAG_MIPMAPPED : 0;
